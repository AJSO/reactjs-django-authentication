{"version":3,"sources":["containers/Signin.module.css","containers/Home.js","actions/alert.js","actions/types.js","actions/auth.js","containers/Activate.js","containers/SignUp.js","containers/Signin.js","containers/ResetPassword.js","containers/ResetPasswordConfirm.js","components/NavBar.js","hocs/Layout.js","reducers/auth.js","reducers/alert.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","setAlert","msg","alertType","timeout","dispatch","id","uuid","type","payload","setTimeout","load_user","a","localStorage","getItem","config","headers","axios","get","process","res","data","connect","verify","uid","token","body","JSON","stringify","post","match","useState","verified","setVerified","to","style","display","justifyContent","alignItems","flexDirection","marginTop","onClick","e","params","state","isAuthenticated","auth","signup","name","email","password","re_password","formData","setFormData","accountCreated","setAccountCreated","onChange","target","value","onSubmit","preventDefault","placeholder","required","minLength","signin","styles","login_page","login_box","login_logo","card","login_bo_msg","href","reset_password","requestSent","setRequestSent","reset_password_confirm","new_password","re_new_password","logout","data-toggle","data-target","aria-controls","aria-expanded","aria-label","checkAuthenticated","code","props","useEffect","children","initialState","access","refresh","user","combineReducers","alert","action","filter","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","exact","path","component","Signin","SignUp","ResetPassword","ResetPasswordConfirm","Activate","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.600a3346.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Signin_card__24K7b\",\"card_body\":\"Signin_card_body__1AF0t\",\"login_card_body\":\"Signin_login_card_body__VF73h\",\"register_card_body\":\"Signin_register_card_body__2Iosi\",\"login_box\":\"Signin_login_box__uOMnx\",\"register_box\":\"Signin_register_box__22Qa7\",\"login_page\":\"Signin_login_page__PstvY\",\"register_page\":\"Signin_register_page__1T-2K\",\"login_box_msg\":\"Signin_login_box_msg__2e_qS\",\"register_box_msg\":\"Signin_register_box_msg__3E38d\",\"login_logo\":\"Signin_login_logo__wLBT2\"};","import React from 'react';\r\n// import {Link, Redirect} from 'react-router-dom'\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className='container mt-5'>\r\n            <div className=\"jumbotron\">\r\n                <h1 className=\"display-4\">Hello, world!</h1>\r\n                <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\r\n            \r\n                <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>\r\n                \r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import { v4 as uuid } from 'uuid';\r\nimport { SET_ALERT, REMOVE_ALERT } from './types';\r\n\r\nexport const setAlert = (msg, alertType, timeout = 5000) => dispatch => {\r\n    const id = uuid();\r\n    dispatch({\r\n        type: SET_ALERT,\r\n        payload: { msg, alertType, id }\r\n    });\r\n\r\n    setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), timeout);\r\n}","export const SET_ALERT = 'SET_ALERT';\r\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\n// activation types\r\nexport const ACTIVATION_SUCCESS = 'ACTIVATION_SUCCESS';\r\nexport const ACTIVATION_FAIL = 'ACTIVATION_FAIL';\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAIL = 'LOAD_USER_FAIL';\r\nexport const LOGOUT = 'LOGOUT'; \r\n\r\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS';\r\nexport const AUTHENTICATED_FAIL = 'AUTHENTICATED_FAIL';\r\n\r\n// password reset types\r\nexport const PASSWORD_RESET_FAIL = 'PASSWORD_RESET_FAIL'; \r\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS'; \r\nexport const PASSWORD_RESET_CONFIRM_FAIL = 'PASSWORD_RESET_CONFIRM_FAIL'; \r\nexport const PASSWORD_RESET_CONFIRM_SUCCESS = 'PASSWORD_RESET_CONFIRM_SUCCESS'; \r\n\r\n\r\n","import axios from 'axios';\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    PASSWORD_RESET_CONFIRM_SUCCESS,\r\n    PASSWORD_RESET_CONFIRM_FAIL,\r\n    PASSWORD_RESET_SUCCESS,\r\n    PASSWORD_RESET_FAIL,\r\n    LOGOUT\r\n} from './types';\r\nimport { setAlert } from './alert';\r\n\r\n\r\nexport const checkAuthenticated=()=>async dispatch=>{\r\n    // check if the access token exists in the localStorage\r\n    if(localStorage.getItem('access')){\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept':'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({ token:localStorage.getItem('access') });\r\n\r\n        try {\r\n\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}auth/jwt/verify/`, body, config);\r\n            if (res.data.code !== 'token_not_valid') {\r\n                dispatch({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                });\r\n            }else {\r\n                dispatch({\r\n                    type: AUTHENTICATED_FAIL\r\n                });\r\n            }\r\n            \r\n        } catch (err) {\r\n            dispatch({\r\n                type:AUTHENTICATED_FAIL\r\n            });\r\n        }\r\n\r\n    }else{\r\n        dispatch({\r\n            type:AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const load_user = () => async dispatch=>{\r\n    // checks to see if the access token still exists\r\n    if(localStorage.getItem('access')){\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization':`JWT ${localStorage.getItem('access')}`,\r\n                'Accept':'application/json'\r\n            }\r\n        };\r\n        try {\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}auth/users/me/`, config);\r\n            dispatch({\r\n                type: LOAD_USER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(setAlert('Authenticated successfully', 'success'));\r\n    \r\n        } catch (error) {\r\n            dispatch({\r\n                type: LOAD_USER_FAIL\r\n            });\r\n            dispatch(setAlert('Error Authenticating', 'error'));\r\n        }\r\n\r\n    }else{\r\n        dispatch({\r\n            type: LOAD_USER_FAIL\r\n        });\r\n        dispatch(setAlert('Error Authenticating', 'error'));\r\n    }  \r\n};\r\n// Signin\r\nexport const signin = (email,password) => async dispatch=>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    const body = JSON.stringify({ email, password });\r\n    \r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}auth/jwt/create/`, body, config);\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        dispatch(load_user());\r\n        dispatch(setAlert('Authenticated successfully', 'success'));\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n        dispatch(setAlert('Error Authenticating', 'error'));\r\n    }\r\n};\r\n\r\n// SignUp\r\nexport const signup = ({ name, email, password, re_password }) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ name, email, password, re_password }); \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}auth/users/`, body, config);\r\n\r\n        dispatch({\r\n            type: SIGNUP_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n// Account Activation\r\nexport const verify = (uid, token) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ uid, token }); \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}auth/users/activation/`, body, config);\r\n\r\n        dispatch({\r\n            type: ACTIVATION_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTIVATION_FAIL\r\n        });\r\n    }\r\n};\r\n// Action to reset password\r\nexport const reset_password=(email)=> async dispatch =>{\r\n    // pass in the config\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    const body = JSON.stringify({email});\r\n    // request\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}auth/users/reset_password/`, body, config);\r\n        dispatch({\r\n            type: PASSWORD_RESET_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_RESET_FAIL\r\n        });\r\n    }\r\n\r\n};\r\n// Action to confirm password Reset\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password }); \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}auth/users/reset_password_confirm/`, body, config);\r\n\r\n        dispatch({\r\n            type: PASSWORD_RESET_CONFIRM_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_RESET_CONFIRM_FAIL\r\n        });\r\n    }\r\n};\r\n// action to logout\r\nexport const logout=()=>async dispatch=>{\r\n    dispatch({\r\n        type:LOGOUT\r\n    });\r\n    \r\n};","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { verify } from '../actions/auth';\r\n\r\nconst Activate = (verify, match) => { //pass props\r\n    const [verified, setVerified] = useState(false);\r\n\r\n    const verify_account = e => {\r\n        // we can also say props.match.params.uid if we passed the props into the function\r\n        const uid = match.params.uid;\r\n        const token = match.params.token;\r\n\r\n        verify(uid, token);\r\n        setVerified(true);\r\n    };\r\n\r\n    if (verified)\r\n        return <Redirect to='/' />\r\n    return (\r\n        <div className='container'>\r\n            <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                flexDirection: 'column',\r\n                marginTop: '200px' }}>\r\n                <h1>Verify your Account:</h1>\r\n                <button \r\n                    onClick={verify_account}\r\n                    style={{ marginTop: '50px' }}\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                >\r\n                    Verify\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(null, { verify })(Activate);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { signup } from '../actions/auth';\r\n\r\nconst Signup = ({ signup, isAuthenticated }) => {\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        re_password: ''\r\n    });\r\n\r\n    const [accountCreated, setAccountCreated] = useState(false);\r\n\r\n    const { name, email, password, re_password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (password === re_password) {\r\n            signup({ name, email, password, re_password });\r\n            setAccountCreated(true);\r\n        }\r\n    };\r\n\r\n    if (isAuthenticated)\r\n        return <Redirect to='/' />;\r\n    if (accountCreated)\r\n        return <Redirect to='signin' />;\r\n    \r\n    return (\r\n        <div className='container mt-5'>\r\n            <h1>Authentication</h1>\r\n            <p>Create your Account</p>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <div className='form-group'>\r\n                    <input \r\n                        className='form-control'\r\n                        type='text'\r\n                        placeholder='Name*'\r\n                        name='name'\r\n                        value={name}\r\n                        onChange={e => onChange(e)}\r\n                        required \r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input \r\n                        className='form-control'\r\n                        type='email'\r\n                        placeholder='Email*'\r\n                        name='email'\r\n                        value={email}\r\n                        onChange={e => onChange(e)}\r\n                        required \r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Password*'\r\n                        name='password'\r\n                        value={password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Confirm Password*'\r\n                        name='re_password'\r\n                        value={re_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Register</button>\r\n            </form>\r\n            <p className='mt-3'>\r\n                Already have an account? <Link to='/signin'>Sign In</Link>\r\n            </p>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n})\r\n\r\nexport default connect(mapStateToProps, { signup })(Signup);","import React, {useState} from 'react';\r\nimport {Link, Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {signin} from '../actions/auth'\r\nimport styles from './Signin.module.css'\r\n\r\nconst Signin=({ signin, isAuthenticated })=>{\r\n\r\n    const[formData, setFormData] = useState({\r\n        // objects\r\n        email:'',\r\n        password:''\r\n    });\r\n    // destruct each of state values \r\n    const{email,password} = formData;\r\n    const onChange=e=>setFormData({...formData, [e.target.name]:e.target.value});\r\n    const onSubmit=e=>{\r\n        e.preventDefault();\r\n\r\n        signin(email,password);//function. import from 'actions/auth.js\r\n    };\r\n    // Is the user Authenticated\r\n    if(isAuthenticated ){\r\n        // Redirect them to the home Page\r\n        return <Redirect to='/' />\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={styles.login_page}>\r\n        <div className={styles.login_box}>\r\n        <div className={styles.login_logo}>\r\n            <Link to=''><b>Authentication</b></Link>\r\n        </div>\r\n        <div className={styles.card}>\r\n            \r\n            <div style={{}} className={styles['card-body'], styles['login_card_body']}>\r\n            <p className={styles.login_bo_msg}>Sign in to start your session</p>\r\n                \r\n                <form onSubmit={ e=>onSubmit(e)}>\r\n                <div className=\"form-group\">\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type='email'\r\n                    placeholder='Email'\r\n                    name='email'\r\n                    value={email}\r\n                    onChange={e=>onChange(e)}\r\n                    required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    name='password'\r\n                    value={password}\r\n                    onChange={e=>onChange(e)}\r\n                    minLength='6'\r\n                    required />\r\n                </div>\r\n                \r\n                    <button className='btn btn-primary btn-block' type='submit'>Sigin</button>\r\n                \r\n                </form>\r\n                <div className=\"social-auth-links text-center mb-3\">\r\n                    <p>- OR -</p>\r\n                    <a href=\"#\" className=\"btn btn-block btn-primary\">\r\n                    <i className=\"fab fa-facebook mr-2\"></i> Sign in using Facebook\r\n                    </a>\r\n                    <a href=\"#\" className=\"btn btn-block btn-danger\">\r\n                    <i className=\"fab fa-google-plus mr-2\"></i> Sign in using Google+\r\n                    </a>\r\n                </div>\r\n                <p className='mt-3'>\r\n                    Don't have an Account? <Link to='/signUp'>Create Account</Link>\r\n                </p>\r\n                <p className='mt-3'>\r\n                    Forgot you password? <Link to='/reset_password'>Reset Password</Link>\r\n                </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    // IsAuthenticated State\r\n    isAuthenticated: state.auth.isAuthenticated\r\n\r\n    \r\n});\r\n\r\nexport default connect(mapStateToProps,{signin})(Signin);","import React, {useState} from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {reset_password} from '../actions/auth'\r\n\r\nconst ResetPassword=({ reset_password })=>{\r\n\r\n    // send State\r\n    const[requestSent, setRequestSent] = useState(false);\r\n\r\n    const[formData, setFormData] = useState({\r\n        // objects\r\n        email:'',\r\n    });\r\n    // destruct each of state values \r\n    const{email} = formData;\r\n\r\n    const onChange=e=>setFormData({...formData, [e.target.name]:e.target.value});\r\n    const onSubmit=e=>{\r\n        e.preventDefault();\r\n        reset_password(email);//function. import from 'actions/auth.js\r\n        setRequestSent(true);\r\n    };\r\n    // Is the user Authenticated\r\n    if(requestSent){\r\n        // Redirect them to the home Page\r\n        return <Redirect to='/' />\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"notification\">\r\n                <h1>Password Reset</h1>\r\n                <p>Reset Your Password.</p>\r\n                <form onSubmit={ e=>onSubmit(e)}>\r\n                <div className=\"form-group\">\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type='email'\r\n                    placeholder='Email'\r\n                    name='email'\r\n                    value={email}\r\n                    onChange={e=>onChange(e)}\r\n                    required />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Reset Password</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(null,{reset_password})(ResetPassword);","import React, {useState} from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {reset_password_confirm } from '../actions/auth'\r\n\r\nconst ResetPasswordConfirm=({ match, reset_password_confirm })=>{\r\n\r\n    // send State\r\n    const[requestSent, setRequestSent] = useState(false);\r\n\r\n    const[formData, setFormData] = useState({\r\n        // objects\r\n        new_password: '',\r\n        re_new_password: ''\r\n    });\r\n    // destruct each of state values \r\n    const { new_password, re_new_password } = formData;\r\n\r\n    const onChange=e=>setFormData({...formData, [e.target.name]:e.target.value});\r\n    const onSubmit=e=>{\r\n        e.preventDefault();\r\n\r\n        const uid = match.params.uid;\r\n        const token = match.params.token;\r\n        //function. import from 'actions/auth.js\r\n        reset_password_confirm(uid,token,new_password,re_new_password);\r\n        \r\n        setRequestSent(true);\r\n    };\r\n    \r\n    if(requestSent){\r\n        // Redirect them to the home Page\r\n        return <Redirect to='/' />\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='container mt-5'>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <div className='form-group'>\r\n                    <input \r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='New Password'\r\n                        name='new_password'\r\n                        value={new_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Confirm New Password'\r\n                        name='re_new_password'\r\n                        value={re_new_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Reset Password</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(null,{reset_password_confirm})(ResetPasswordConfirm);","import React, {Fragment} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../actions/auth';\r\n\r\n\r\nfunction NavBar({logout,isAuthenticated}) {\r\n\r\n    const guestLinks=()=>(\r\n        <Fragment>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/signUp\">Create Account</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/signin\">Signin</Link>\r\n            </li>\r\n        </Fragment>\r\n    );\r\n    const authLinks=()=>(\r\n        <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#!\" onClick={logout}>Logout</a>\r\n        </li>\r\n    );\r\n\r\n    // const logoutHandler=()=>{\r\n    //     logout();\r\n    // };\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" to=\"#\">Navbar</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n                    <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item active\">\r\n                        <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                    </li>\r\n                    {isAuthenticated ? authLinks() : guestLinks()}                    \r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    isAuthenticated:state.auth.isAuthenticated\r\n});\r\nexport default connect(mapStateToProps, {logout})(NavBar);","import React, {useEffect}from 'react';\r\nimport NavBar from '../components/NavBar.js'\r\nimport {connect} from 'react-redux'\r\nimport { checkAuthenticated, load_user } from '../actions/auth'\r\n\r\nconst Layout=(props)=>{\r\n\r\n    useEffect(()=>{\r\n        props.checkAuthenticated();\r\n        props.load_user()\r\n    },[]);\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(null, {checkAuthenticated,load_user})(Layout);","import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    PASSWORD_RESET_CONFIRM_SUCCESS,\r\n    PASSWORD_RESET_CONFIRM_FAIL,\r\n    PASSWORD_RESET_SUCCESS,\r\n    PASSWORD_RESET_FAIL,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    LOGOUT\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    access: localStorage.getItem('access'),\r\n    refresh: localStorage.getItem('refresh'),\r\n    isAuthenticated: null,\r\n    user:null,\r\n    // loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch(type) {\r\n        // if the login is success, we get the access token\r\n        case AUTHENTICATED_SUCCESS:\r\n            return{\r\n                ...state,\r\n                isAuthenticated: true,\r\n            }\r\n        case AUTHENTICATED_FAIL:\r\n            return{\r\n                ...state,\r\n                isAuthenticated: false,\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            localStorage.setItem('access ', payload.access);\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                // loading: false,\r\n                access: payload.access\r\n            }\r\n        case LOAD_USER_SUCCESS:\r\n            return{\r\n                ...state,\r\n                user:payload\r\n            }\r\n\r\n        case LOAD_USER_FAIL:\r\n            return{\r\n                ...state,\r\n                user:null\r\n            }\r\n\r\n        case SIGNUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false,\r\n                // loading: true\r\n            }\r\n        case SIGNUP_FAIL:\r\n        case LOGIN_FAIL:\r\n            localStorage.removeItem('access');\r\n            localStorage.removeItem('refresh');\r\n            return {\r\n                ...state,\r\n                access: null,\r\n                refresh:null,\r\n                isAuthenticated: false,\r\n                // loading: false\r\n                user:null\r\n            }\r\n\r\n        case LOGOUT:\r\n            localStorage.removeItem('access');\r\n            localStorage.removeItem('refresh');\r\n            return {\r\n                ...state,\r\n                access: null,\r\n                refresh:null,\r\n                isAuthenticated: false,\r\n                // loading: false\r\n                user:null\r\n            }\r\n        case PASSWORD_RESET_CONFIRM_SUCCESS:\r\n        case PASSWORD_RESET_CONFIRM_FAIL:\r\n        case PASSWORD_RESET_SUCCESS:\r\n        case PASSWORD_RESET_FAIL:\r\n        case ACTIVATION_SUCCESS:\r\n        case ACTIVATION_FAIL:\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\r\n\r\nconst initialState = [];\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch(type) {\r\n        case SET_ALERT:\r\n            // spread operator \r\n            return [...state, payload]\r\n        case REMOVE_ALERT:\r\n            return state.filter(alert => alert.id !== payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport auth from './auth';\r\nimport alert from './alert';\r\n\r\nexport default combineReducers({\r\n    alert,\r\n    auth\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'; //makes viewing in the web browser easier.\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {}; //object\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    //\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './containers/Home';\nimport Activate from './containers/Activate';\nimport SignUp from './containers/SignUp';\nimport Signin from './containers/Signin';\nimport ResetPassword from './containers/ResetPassword';\nimport ResetPasswordConfirm from './containers/ResetPasswordConfirm';\nimport Layout from './hocs/Layout'\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n      <Router>\n        <Layout>\n        <Switch>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/signin' component={Signin} />\n        <Route exact path='/signUp' component={SignUp} />\n        <Route exact path='/reset_password' component={ResetPassword} />\n        {/* as mentioned in the backend djoser settings */}\n        <Route exact path='/password/reset/confirm/:uid/:token' component={ResetPasswordConfirm} />\n        <Route exact path='/activate/:uid/:token' component={Activate} />\n        </Switch>\n        </Layout>\n      </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import \"bulma/css/bulma.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}